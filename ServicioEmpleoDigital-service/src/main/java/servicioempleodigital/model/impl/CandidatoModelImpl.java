/**
 * Copyright (c) 2000-present Liferay, Inc. All rights reserved.
 *
 * This library is free software; you can redistribute it and/or modify it under
 * the terms of the GNU Lesser General Public License as published by the Free
 * Software Foundation; either version 2.1 of the License, or (at your option)
 * any later version.
 *
 * This library is distributed in the hope that it will be useful, but WITHOUT
 * ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or FITNESS
 * FOR A PARTICULAR PURPOSE. See the GNU Lesser General Public License for more
 * details.
 */

package servicioempleodigital.model.impl;

import aQute.bnd.annotation.ProviderType;

import com.liferay.expando.kernel.model.ExpandoBridge;
import com.liferay.expando.kernel.util.ExpandoBridgeFactoryUtil;

import com.liferay.portal.kernel.bean.AutoEscapeBeanHandler;
import com.liferay.portal.kernel.json.JSON;
import com.liferay.portal.kernel.model.CacheModel;
import com.liferay.portal.kernel.model.impl.BaseModelImpl;
import com.liferay.portal.kernel.service.ServiceContext;
import com.liferay.portal.kernel.util.GetterUtil;
import com.liferay.portal.kernel.util.ProxyUtil;
import com.liferay.portal.kernel.util.StringBundler;
import com.liferay.portal.kernel.util.StringPool;

import servicioempleodigital.model.Candidato;
import servicioempleodigital.model.CandidatoModel;
import servicioempleodigital.model.CandidatoSoap;

import java.io.Serializable;

import java.sql.Types;

import java.util.ArrayList;
import java.util.Date;
import java.util.HashMap;
import java.util.List;
import java.util.Map;

/**
 * The base model implementation for the Candidato service. Represents a row in the &quot;FOO_Candidato&quot; database table, with each column mapped to a property of this class.
 *
 * <p>
 * This implementation and its corresponding interface {@link CandidatoModel} exist only as a container for the default property accessors generated by ServiceBuilder. Helper methods and all application logic should be put in {@link CandidatoImpl}.
 * </p>
 *
 * @author Francisco de Borja Segovia Gilsanz
 * @see CandidatoImpl
 * @see Candidato
 * @see CandidatoModel
 * @generated
 */
@JSON(strict = true)
@ProviderType
public class CandidatoModelImpl extends BaseModelImpl<Candidato>
	implements CandidatoModel {
	/*
	 * NOTE FOR DEVELOPERS:
	 *
	 * Never modify or reference this class directly. All methods that expect a candidato model instance should use the {@link Candidato} interface instead.
	 */
	public static final String TABLE_NAME = "FOO_Candidato";
	public static final Object[][] TABLE_COLUMNS = {
			{ "idCandidato", Types.BIGINT },
			{ "nif", Types.VARCHAR },
			{ "nombre", Types.VARCHAR },
			{ "apellidos", Types.VARCHAR },
			{ "fechaDeNacimiento", Types.TIMESTAMP },
			{ "email", Types.VARCHAR },
			{ "telefono", Types.VARCHAR },
			{ "password_", Types.VARCHAR },
			{ "provincia", Types.INTEGER },
			{ "ciudad", Types.VARCHAR }
		};
	public static final Map<String, Integer> TABLE_COLUMNS_MAP = new HashMap<String, Integer>();

	static {
		TABLE_COLUMNS_MAP.put("idCandidato", Types.BIGINT);
		TABLE_COLUMNS_MAP.put("nif", Types.VARCHAR);
		TABLE_COLUMNS_MAP.put("nombre", Types.VARCHAR);
		TABLE_COLUMNS_MAP.put("apellidos", Types.VARCHAR);
		TABLE_COLUMNS_MAP.put("fechaDeNacimiento", Types.TIMESTAMP);
		TABLE_COLUMNS_MAP.put("email", Types.VARCHAR);
		TABLE_COLUMNS_MAP.put("telefono", Types.VARCHAR);
		TABLE_COLUMNS_MAP.put("password_", Types.VARCHAR);
		TABLE_COLUMNS_MAP.put("provincia", Types.INTEGER);
		TABLE_COLUMNS_MAP.put("ciudad", Types.VARCHAR);
	}

	public static final String TABLE_SQL_CREATE = "create table FOO_Candidato (idCandidato LONG not null primary key IDENTITY,nif VARCHAR(75) null,nombre VARCHAR(75) null,apellidos VARCHAR(75) null,fechaDeNacimiento DATE null,email VARCHAR(75) null,telefono VARCHAR(75) null,password_ VARCHAR(75) null,provincia INTEGER,ciudad VARCHAR(75) null)";
	public static final String TABLE_SQL_DROP = "drop table FOO_Candidato";
	public static final String ORDER_BY_JPQL = " ORDER BY candidato.idCandidato ASC";
	public static final String ORDER_BY_SQL = " ORDER BY FOO_Candidato.idCandidato ASC";
	public static final String DATA_SOURCE = "liferayDataSource";
	public static final String SESSION_FACTORY = "liferaySessionFactory";
	public static final String TX_MANAGER = "liferayTransactionManager";
	public static final boolean ENTITY_CACHE_ENABLED = GetterUtil.getBoolean(servicioempleodigital.service.util.ServiceProps.get(
				"value.object.entity.cache.enabled.servicioempleodigital.model.Candidato"),
			true);
	public static final boolean FINDER_CACHE_ENABLED = GetterUtil.getBoolean(servicioempleodigital.service.util.ServiceProps.get(
				"value.object.finder.cache.enabled.servicioempleodigital.model.Candidato"),
			true);
	public static final boolean COLUMN_BITMASK_ENABLED = false;

	/**
	 * Converts the soap model instance into a normal model instance.
	 *
	 * @param soapModel the soap model instance to convert
	 * @return the normal model instance
	 */
	public static Candidato toModel(CandidatoSoap soapModel) {
		if (soapModel == null) {
			return null;
		}

		Candidato model = new CandidatoImpl();

		model.setIdCandidato(soapModel.getIdCandidato());
		model.setNif(soapModel.getNif());
		model.setNombre(soapModel.getNombre());
		model.setApellidos(soapModel.getApellidos());
		model.setFechaDeNacimiento(soapModel.getFechaDeNacimiento());
		model.setEmail(soapModel.getEmail());
		model.setTelefono(soapModel.getTelefono());
		model.setPassword(soapModel.getPassword());
		model.setProvincia(soapModel.getProvincia());
		model.setCiudad(soapModel.getCiudad());

		return model;
	}

	/**
	 * Converts the soap model instances into normal model instances.
	 *
	 * @param soapModels the soap model instances to convert
	 * @return the normal model instances
	 */
	public static List<Candidato> toModels(CandidatoSoap[] soapModels) {
		if (soapModels == null) {
			return null;
		}

		List<Candidato> models = new ArrayList<Candidato>(soapModels.length);

		for (CandidatoSoap soapModel : soapModels) {
			models.add(toModel(soapModel));
		}

		return models;
	}

	public static final long LOCK_EXPIRATION_TIME = GetterUtil.getLong(servicioempleodigital.service.util.ServiceProps.get(
				"lock.expiration.time.servicioempleodigital.model.Candidato"));

	public CandidatoModelImpl() {
	}

	@Override
	public long getPrimaryKey() {
		return _idCandidato;
	}

	@Override
	public void setPrimaryKey(long primaryKey) {
		setIdCandidato(primaryKey);
	}

	@Override
	public Serializable getPrimaryKeyObj() {
		return _idCandidato;
	}

	@Override
	public void setPrimaryKeyObj(Serializable primaryKeyObj) {
		setPrimaryKey(((Long)primaryKeyObj).longValue());
	}

	@Override
	public Class<?> getModelClass() {
		return Candidato.class;
	}

	@Override
	public String getModelClassName() {
		return Candidato.class.getName();
	}

	@Override
	public Map<String, Object> getModelAttributes() {
		Map<String, Object> attributes = new HashMap<String, Object>();

		attributes.put("idCandidato", getIdCandidato());
		attributes.put("nif", getNif());
		attributes.put("nombre", getNombre());
		attributes.put("apellidos", getApellidos());
		attributes.put("fechaDeNacimiento", getFechaDeNacimiento());
		attributes.put("email", getEmail());
		attributes.put("telefono", getTelefono());
		attributes.put("password", getPassword());
		attributes.put("provincia", getProvincia());
		attributes.put("ciudad", getCiudad());

		attributes.put("entityCacheEnabled", isEntityCacheEnabled());
		attributes.put("finderCacheEnabled", isFinderCacheEnabled());

		return attributes;
	}

	@Override
	public void setModelAttributes(Map<String, Object> attributes) {
		Long idCandidato = (Long)attributes.get("idCandidato");

		if (idCandidato != null) {
			setIdCandidato(idCandidato);
		}

		String nif = (String)attributes.get("nif");

		if (nif != null) {
			setNif(nif);
		}

		String nombre = (String)attributes.get("nombre");

		if (nombre != null) {
			setNombre(nombre);
		}

		String apellidos = (String)attributes.get("apellidos");

		if (apellidos != null) {
			setApellidos(apellidos);
		}

		Date fechaDeNacimiento = (Date)attributes.get("fechaDeNacimiento");

		if (fechaDeNacimiento != null) {
			setFechaDeNacimiento(fechaDeNacimiento);
		}

		String email = (String)attributes.get("email");

		if (email != null) {
			setEmail(email);
		}

		String telefono = (String)attributes.get("telefono");

		if (telefono != null) {
			setTelefono(telefono);
		}

		String password = (String)attributes.get("password");

		if (password != null) {
			setPassword(password);
		}

		Integer provincia = (Integer)attributes.get("provincia");

		if (provincia != null) {
			setProvincia(provincia);
		}

		String ciudad = (String)attributes.get("ciudad");

		if (ciudad != null) {
			setCiudad(ciudad);
		}
	}

	@JSON
	@Override
	public long getIdCandidato() {
		return _idCandidato;
	}

	@Override
	public void setIdCandidato(long idCandidato) {
		_idCandidato = idCandidato;
	}

	@JSON
	@Override
	public String getNif() {
		if (_nif == null) {
			return StringPool.BLANK;
		}
		else {
			return _nif;
		}
	}

	@Override
	public void setNif(String nif) {
		_nif = nif;
	}

	@JSON
	@Override
	public String getNombre() {
		if (_nombre == null) {
			return StringPool.BLANK;
		}
		else {
			return _nombre;
		}
	}

	@Override
	public void setNombre(String nombre) {
		_nombre = nombre;
	}

	@JSON
	@Override
	public String getApellidos() {
		if (_apellidos == null) {
			return StringPool.BLANK;
		}
		else {
			return _apellidos;
		}
	}

	@Override
	public void setApellidos(String apellidos) {
		_apellidos = apellidos;
	}

	@JSON
	@Override
	public Date getFechaDeNacimiento() {
		return _fechaDeNacimiento;
	}

	@Override
	public void setFechaDeNacimiento(Date fechaDeNacimiento) {
		_fechaDeNacimiento = fechaDeNacimiento;
	}

	@JSON
	@Override
	public String getEmail() {
		if (_email == null) {
			return StringPool.BLANK;
		}
		else {
			return _email;
		}
	}

	@Override
	public void setEmail(String email) {
		_email = email;
	}

	@JSON
	@Override
	public String getTelefono() {
		if (_telefono == null) {
			return StringPool.BLANK;
		}
		else {
			return _telefono;
		}
	}

	@Override
	public void setTelefono(String telefono) {
		_telefono = telefono;
	}

	@JSON
	@Override
	public String getPassword() {
		if (_password == null) {
			return StringPool.BLANK;
		}
		else {
			return _password;
		}
	}

	@Override
	public void setPassword(String password) {
		_password = password;
	}

	@JSON
	@Override
	public int getProvincia() {
		return _provincia;
	}

	@Override
	public void setProvincia(int provincia) {
		_provincia = provincia;
	}

	@JSON
	@Override
	public String getCiudad() {
		if (_ciudad == null) {
			return StringPool.BLANK;
		}
		else {
			return _ciudad;
		}
	}

	@Override
	public void setCiudad(String ciudad) {
		_ciudad = ciudad;
	}

	@Override
	public ExpandoBridge getExpandoBridge() {
		return ExpandoBridgeFactoryUtil.getExpandoBridge(0,
			Candidato.class.getName(), getPrimaryKey());
	}

	@Override
	public void setExpandoBridgeAttributes(ServiceContext serviceContext) {
		ExpandoBridge expandoBridge = getExpandoBridge();

		expandoBridge.setAttributes(serviceContext);
	}

	@Override
	public Candidato toEscapedModel() {
		if (_escapedModel == null) {
			_escapedModel = (Candidato)ProxyUtil.newProxyInstance(_classLoader,
					_escapedModelInterfaces, new AutoEscapeBeanHandler(this));
		}

		return _escapedModel;
	}

	@Override
	public Object clone() {
		CandidatoImpl candidatoImpl = new CandidatoImpl();

		candidatoImpl.setIdCandidato(getIdCandidato());
		candidatoImpl.setNif(getNif());
		candidatoImpl.setNombre(getNombre());
		candidatoImpl.setApellidos(getApellidos());
		candidatoImpl.setFechaDeNacimiento(getFechaDeNacimiento());
		candidatoImpl.setEmail(getEmail());
		candidatoImpl.setTelefono(getTelefono());
		candidatoImpl.setPassword(getPassword());
		candidatoImpl.setProvincia(getProvincia());
		candidatoImpl.setCiudad(getCiudad());

		candidatoImpl.resetOriginalValues();

		return candidatoImpl;
	}

	@Override
	public int compareTo(Candidato candidato) {
		long primaryKey = candidato.getPrimaryKey();

		if (getPrimaryKey() < primaryKey) {
			return -1;
		}
		else if (getPrimaryKey() > primaryKey) {
			return 1;
		}
		else {
			return 0;
		}
	}

	@Override
	public boolean equals(Object obj) {
		if (this == obj) {
			return true;
		}

		if (!(obj instanceof Candidato)) {
			return false;
		}

		Candidato candidato = (Candidato)obj;

		long primaryKey = candidato.getPrimaryKey();

		if (getPrimaryKey() == primaryKey) {
			return true;
		}
		else {
			return false;
		}
	}

	@Override
	public int hashCode() {
		return (int)getPrimaryKey();
	}

	@Override
	public boolean isEntityCacheEnabled() {
		return ENTITY_CACHE_ENABLED;
	}

	@Override
	public boolean isFinderCacheEnabled() {
		return FINDER_CACHE_ENABLED;
	}

	@Override
	public void resetOriginalValues() {
	}

	@Override
	public CacheModel<Candidato> toCacheModel() {
		CandidatoCacheModel candidatoCacheModel = new CandidatoCacheModel();

		candidatoCacheModel.idCandidato = getIdCandidato();

		candidatoCacheModel.nif = getNif();

		String nif = candidatoCacheModel.nif;

		if ((nif != null) && (nif.length() == 0)) {
			candidatoCacheModel.nif = null;
		}

		candidatoCacheModel.nombre = getNombre();

		String nombre = candidatoCacheModel.nombre;

		if ((nombre != null) && (nombre.length() == 0)) {
			candidatoCacheModel.nombre = null;
		}

		candidatoCacheModel.apellidos = getApellidos();

		String apellidos = candidatoCacheModel.apellidos;

		if ((apellidos != null) && (apellidos.length() == 0)) {
			candidatoCacheModel.apellidos = null;
		}

		Date fechaDeNacimiento = getFechaDeNacimiento();

		if (fechaDeNacimiento != null) {
			candidatoCacheModel.fechaDeNacimiento = fechaDeNacimiento.getTime();
		}
		else {
			candidatoCacheModel.fechaDeNacimiento = Long.MIN_VALUE;
		}

		candidatoCacheModel.email = getEmail();

		String email = candidatoCacheModel.email;

		if ((email != null) && (email.length() == 0)) {
			candidatoCacheModel.email = null;
		}

		candidatoCacheModel.telefono = getTelefono();

		String telefono = candidatoCacheModel.telefono;

		if ((telefono != null) && (telefono.length() == 0)) {
			candidatoCacheModel.telefono = null;
		}

		candidatoCacheModel.password = getPassword();

		String password = candidatoCacheModel.password;

		if ((password != null) && (password.length() == 0)) {
			candidatoCacheModel.password = null;
		}

		candidatoCacheModel.provincia = getProvincia();

		candidatoCacheModel.ciudad = getCiudad();

		String ciudad = candidatoCacheModel.ciudad;

		if ((ciudad != null) && (ciudad.length() == 0)) {
			candidatoCacheModel.ciudad = null;
		}

		return candidatoCacheModel;
	}

	@Override
	public String toString() {
		StringBundler sb = new StringBundler(21);

		sb.append("{idCandidato=");
		sb.append(getIdCandidato());
		sb.append(", nif=");
		sb.append(getNif());
		sb.append(", nombre=");
		sb.append(getNombre());
		sb.append(", apellidos=");
		sb.append(getApellidos());
		sb.append(", fechaDeNacimiento=");
		sb.append(getFechaDeNacimiento());
		sb.append(", email=");
		sb.append(getEmail());
		sb.append(", telefono=");
		sb.append(getTelefono());
		sb.append(", password=");
		sb.append(getPassword());
		sb.append(", provincia=");
		sb.append(getProvincia());
		sb.append(", ciudad=");
		sb.append(getCiudad());
		sb.append("}");

		return sb.toString();
	}

	@Override
	public String toXmlString() {
		StringBundler sb = new StringBundler(34);

		sb.append("<model><model-name>");
		sb.append("servicioempleodigital.model.Candidato");
		sb.append("</model-name>");

		sb.append(
			"<column><column-name>idCandidato</column-name><column-value><![CDATA[");
		sb.append(getIdCandidato());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>nif</column-name><column-value><![CDATA[");
		sb.append(getNif());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>nombre</column-name><column-value><![CDATA[");
		sb.append(getNombre());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>apellidos</column-name><column-value><![CDATA[");
		sb.append(getApellidos());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>fechaDeNacimiento</column-name><column-value><![CDATA[");
		sb.append(getFechaDeNacimiento());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>email</column-name><column-value><![CDATA[");
		sb.append(getEmail());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>telefono</column-name><column-value><![CDATA[");
		sb.append(getTelefono());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>password</column-name><column-value><![CDATA[");
		sb.append(getPassword());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>provincia</column-name><column-value><![CDATA[");
		sb.append(getProvincia());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>ciudad</column-name><column-value><![CDATA[");
		sb.append(getCiudad());
		sb.append("]]></column-value></column>");

		sb.append("</model>");

		return sb.toString();
	}

	private static final ClassLoader _classLoader = Candidato.class.getClassLoader();
	private static final Class<?>[] _escapedModelInterfaces = new Class[] {
			Candidato.class
		};
	private long _idCandidato;
	private String _nif;
	private String _nombre;
	private String _apellidos;
	private Date _fechaDeNacimiento;
	private String _email;
	private String _telefono;
	private String _password;
	private int _provincia;
	private String _ciudad;
	private Candidato _escapedModel;
}
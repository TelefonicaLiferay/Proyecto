/**
 * Copyright (c) 2000-present Liferay, Inc. All rights reserved.
 *
 * This library is free software; you can redistribute it and/or modify it under
 * the terms of the GNU Lesser General Public License as published by the Free
 * Software Foundation; either version 2.1 of the License, or (at your option)
 * any later version.
 *
 * This library is distributed in the hope that it will be useful, but WITHOUT
 * ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or FITNESS
 * FOR A PARTICULAR PURPOSE. See the GNU Lesser General Public License for more
 * details.
 */

package servicioempleodigital.model.impl;

import aQute.bnd.annotation.ProviderType;

import com.liferay.expando.kernel.model.ExpandoBridge;
import com.liferay.expando.kernel.util.ExpandoBridgeFactoryUtil;

import com.liferay.portal.kernel.bean.AutoEscapeBeanHandler;
import com.liferay.portal.kernel.json.JSON;
import com.liferay.portal.kernel.model.CacheModel;
import com.liferay.portal.kernel.model.impl.BaseModelImpl;
import com.liferay.portal.kernel.service.ServiceContext;
import com.liferay.portal.kernel.util.GetterUtil;
import com.liferay.portal.kernel.util.ProxyUtil;
import com.liferay.portal.kernel.util.StringBundler;
import com.liferay.portal.kernel.util.StringPool;

import servicioempleodigital.model.Pregunta;
import servicioempleodigital.model.PreguntaModel;
import servicioempleodigital.model.PreguntaSoap;

import java.io.Serializable;

import java.sql.Types;

import java.util.ArrayList;
import java.util.HashMap;
import java.util.List;
import java.util.Map;

/**
 * The base model implementation for the Pregunta service. Represents a row in the &quot;FOO_Pregunta&quot; database table, with each column mapped to a property of this class.
 *
 * <p>
 * This implementation and its corresponding interface {@link PreguntaModel} exist only as a container for the default property accessors generated by ServiceBuilder. Helper methods and all application logic should be put in {@link PreguntaImpl}.
 * </p>
 *
 * @author Francisco de Borja Segovia Gilsanz
 * @see PreguntaImpl
 * @see Pregunta
 * @see PreguntaModel
 * @generated
 */
@JSON(strict = true)
@ProviderType
public class PreguntaModelImpl extends BaseModelImpl<Pregunta>
	implements PreguntaModel {
	/*
	 * NOTE FOR DEVELOPERS:
	 *
	 * Never modify or reference this class directly. All methods that expect a pregunta model instance should use the {@link Pregunta} interface instead.
	 */
	public static final String TABLE_NAME = "FOO_Pregunta";
	public static final Object[][] TABLE_COLUMNS = {
			{ "idPregunta", Types.BIGINT },
			{ "enunciado", Types.VARCHAR },
			{ "tipo", Types.INTEGER },
			{ "idOferta", Types.BIGINT }
		};
	public static final Map<String, Integer> TABLE_COLUMNS_MAP = new HashMap<String, Integer>();

	static {
		TABLE_COLUMNS_MAP.put("idPregunta", Types.BIGINT);
		TABLE_COLUMNS_MAP.put("enunciado", Types.VARCHAR);
		TABLE_COLUMNS_MAP.put("tipo", Types.INTEGER);
		TABLE_COLUMNS_MAP.put("idOferta", Types.BIGINT);
	}

	public static final String TABLE_SQL_CREATE = "create table FOO_Pregunta (idPregunta LONG not null primary key IDENTITY,enunciado VARCHAR(75) null,tipo INTEGER,idOferta LONG)";
	public static final String TABLE_SQL_DROP = "drop table FOO_Pregunta";
	public static final String ORDER_BY_JPQL = " ORDER BY pregunta.idPregunta ASC";
	public static final String ORDER_BY_SQL = " ORDER BY FOO_Pregunta.idPregunta ASC";
	public static final String DATA_SOURCE = "liferayDataSource";
	public static final String SESSION_FACTORY = "liferaySessionFactory";
	public static final String TX_MANAGER = "liferayTransactionManager";
	public static final boolean ENTITY_CACHE_ENABLED = GetterUtil.getBoolean(servicioempleodigital.service.util.ServiceProps.get(
				"value.object.entity.cache.enabled.servicioempleodigital.model.Pregunta"),
			true);
	public static final boolean FINDER_CACHE_ENABLED = GetterUtil.getBoolean(servicioempleodigital.service.util.ServiceProps.get(
				"value.object.finder.cache.enabled.servicioempleodigital.model.Pregunta"),
			true);
	public static final boolean COLUMN_BITMASK_ENABLED = false;

	/**
	 * Converts the soap model instance into a normal model instance.
	 *
	 * @param soapModel the soap model instance to convert
	 * @return the normal model instance
	 */
	public static Pregunta toModel(PreguntaSoap soapModel) {
		if (soapModel == null) {
			return null;
		}

		Pregunta model = new PreguntaImpl();

		model.setIdPregunta(soapModel.getIdPregunta());
		model.setEnunciado(soapModel.getEnunciado());
		model.setTipo(soapModel.getTipo());
		model.setIdOferta(soapModel.getIdOferta());

		return model;
	}

	/**
	 * Converts the soap model instances into normal model instances.
	 *
	 * @param soapModels the soap model instances to convert
	 * @return the normal model instances
	 */
	public static List<Pregunta> toModels(PreguntaSoap[] soapModels) {
		if (soapModels == null) {
			return null;
		}

		List<Pregunta> models = new ArrayList<Pregunta>(soapModels.length);

		for (PreguntaSoap soapModel : soapModels) {
			models.add(toModel(soapModel));
		}

		return models;
	}

	public static final long LOCK_EXPIRATION_TIME = GetterUtil.getLong(servicioempleodigital.service.util.ServiceProps.get(
				"lock.expiration.time.servicioempleodigital.model.Pregunta"));

	public PreguntaModelImpl() {
	}

	@Override
	public long getPrimaryKey() {
		return _idPregunta;
	}

	@Override
	public void setPrimaryKey(long primaryKey) {
		setIdPregunta(primaryKey);
	}

	@Override
	public Serializable getPrimaryKeyObj() {
		return _idPregunta;
	}

	@Override
	public void setPrimaryKeyObj(Serializable primaryKeyObj) {
		setPrimaryKey(((Long)primaryKeyObj).longValue());
	}

	@Override
	public Class<?> getModelClass() {
		return Pregunta.class;
	}

	@Override
	public String getModelClassName() {
		return Pregunta.class.getName();
	}

	@Override
	public Map<String, Object> getModelAttributes() {
		Map<String, Object> attributes = new HashMap<String, Object>();

		attributes.put("idPregunta", getIdPregunta());
		attributes.put("enunciado", getEnunciado());
		attributes.put("tipo", getTipo());
		attributes.put("idOferta", getIdOferta());

		attributes.put("entityCacheEnabled", isEntityCacheEnabled());
		attributes.put("finderCacheEnabled", isFinderCacheEnabled());

		return attributes;
	}

	@Override
	public void setModelAttributes(Map<String, Object> attributes) {
		Long idPregunta = (Long)attributes.get("idPregunta");

		if (idPregunta != null) {
			setIdPregunta(idPregunta);
		}

		String enunciado = (String)attributes.get("enunciado");

		if (enunciado != null) {
			setEnunciado(enunciado);
		}

		Integer tipo = (Integer)attributes.get("tipo");

		if (tipo != null) {
			setTipo(tipo);
		}

		Long idOferta = (Long)attributes.get("idOferta");

		if (idOferta != null) {
			setIdOferta(idOferta);
		}
	}

	@JSON
	@Override
	public long getIdPregunta() {
		return _idPregunta;
	}

	@Override
	public void setIdPregunta(long idPregunta) {
		_idPregunta = idPregunta;
	}

	@JSON
	@Override
	public String getEnunciado() {
		if (_enunciado == null) {
			return StringPool.BLANK;
		}
		else {
			return _enunciado;
		}
	}

	@Override
	public void setEnunciado(String enunciado) {
		_enunciado = enunciado;
	}

	@JSON
	@Override
	public int getTipo() {
		return _tipo;
	}

	@Override
	public void setTipo(int tipo) {
		_tipo = tipo;
	}

	@JSON
	@Override
	public long getIdOferta() {
		return _idOferta;
	}

	@Override
	public void setIdOferta(long idOferta) {
		_idOferta = idOferta;
	}

	@Override
	public ExpandoBridge getExpandoBridge() {
		return ExpandoBridgeFactoryUtil.getExpandoBridge(0,
			Pregunta.class.getName(), getPrimaryKey());
	}

	@Override
	public void setExpandoBridgeAttributes(ServiceContext serviceContext) {
		ExpandoBridge expandoBridge = getExpandoBridge();

		expandoBridge.setAttributes(serviceContext);
	}

	@Override
	public Pregunta toEscapedModel() {
		if (_escapedModel == null) {
			_escapedModel = (Pregunta)ProxyUtil.newProxyInstance(_classLoader,
					_escapedModelInterfaces, new AutoEscapeBeanHandler(this));
		}

		return _escapedModel;
	}

	@Override
	public Object clone() {
		PreguntaImpl preguntaImpl = new PreguntaImpl();

		preguntaImpl.setIdPregunta(getIdPregunta());
		preguntaImpl.setEnunciado(getEnunciado());
		preguntaImpl.setTipo(getTipo());
		preguntaImpl.setIdOferta(getIdOferta());

		preguntaImpl.resetOriginalValues();

		return preguntaImpl;
	}

	@Override
	public int compareTo(Pregunta pregunta) {
		long primaryKey = pregunta.getPrimaryKey();

		if (getPrimaryKey() < primaryKey) {
			return -1;
		}
		else if (getPrimaryKey() > primaryKey) {
			return 1;
		}
		else {
			return 0;
		}
	}

	@Override
	public boolean equals(Object obj) {
		if (this == obj) {
			return true;
		}

		if (!(obj instanceof Pregunta)) {
			return false;
		}

		Pregunta pregunta = (Pregunta)obj;

		long primaryKey = pregunta.getPrimaryKey();

		if (getPrimaryKey() == primaryKey) {
			return true;
		}
		else {
			return false;
		}
	}

	@Override
	public int hashCode() {
		return (int)getPrimaryKey();
	}

	@Override
	public boolean isEntityCacheEnabled() {
		return ENTITY_CACHE_ENABLED;
	}

	@Override
	public boolean isFinderCacheEnabled() {
		return FINDER_CACHE_ENABLED;
	}

	@Override
	public void resetOriginalValues() {
	}

	@Override
	public CacheModel<Pregunta> toCacheModel() {
		PreguntaCacheModel preguntaCacheModel = new PreguntaCacheModel();

		preguntaCacheModel.idPregunta = getIdPregunta();

		preguntaCacheModel.enunciado = getEnunciado();

		String enunciado = preguntaCacheModel.enunciado;

		if ((enunciado != null) && (enunciado.length() == 0)) {
			preguntaCacheModel.enunciado = null;
		}

		preguntaCacheModel.tipo = getTipo();

		preguntaCacheModel.idOferta = getIdOferta();

		return preguntaCacheModel;
	}

	@Override
	public String toString() {
		StringBundler sb = new StringBundler(9);

		sb.append("{idPregunta=");
		sb.append(getIdPregunta());
		sb.append(", enunciado=");
		sb.append(getEnunciado());
		sb.append(", tipo=");
		sb.append(getTipo());
		sb.append(", idOferta=");
		sb.append(getIdOferta());
		sb.append("}");

		return sb.toString();
	}

	@Override
	public String toXmlString() {
		StringBundler sb = new StringBundler(16);

		sb.append("<model><model-name>");
		sb.append("servicioempleodigital.model.Pregunta");
		sb.append("</model-name>");

		sb.append(
			"<column><column-name>idPregunta</column-name><column-value><![CDATA[");
		sb.append(getIdPregunta());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>enunciado</column-name><column-value><![CDATA[");
		sb.append(getEnunciado());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>tipo</column-name><column-value><![CDATA[");
		sb.append(getTipo());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>idOferta</column-name><column-value><![CDATA[");
		sb.append(getIdOferta());
		sb.append("]]></column-value></column>");

		sb.append("</model>");

		return sb.toString();
	}

	private static final ClassLoader _classLoader = Pregunta.class.getClassLoader();
	private static final Class<?>[] _escapedModelInterfaces = new Class[] {
			Pregunta.class
		};
	private long _idPregunta;
	private String _enunciado;
	private int _tipo;
	private long _idOferta;
	private Pregunta _escapedModel;
}